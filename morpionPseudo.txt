# DEBUT

# On admet une fonction `clear` qui efface tout le texte affiché
# On admet une fonction `sleep` qui permet d'attendre (même si elle existe déjà en larp :])
# On admet une fonction `lower` qui met une chaine de caractere en minuscule
# On admet une fonction `deepcopy` qui crée une copie d'une liste
# On admet une fonction `choice` qui choisi un element aléatoire d'une liste
# On admet une fonction `randint` qui choisi un nombre entier entre `a` et `b`
# On admet une fonction `checkInt` qui permet de verifier si une chaine de caractere peut être un nombre entier

# On admet une fonction `input` avec un argument `Text`:
    # Afficher la valeur de `Text`
    # Attendre que l'utilisateur entre une chaine de caractère, puis la renvoyer

# Definir `playerSymbols` comme une liste avec les caracteres '.', 'X' et 'O'
# Definir `abc` comme une liste avec les caracteres 'a', 'b' et 'c'
# Definir `ott` comme une liste avec les caracteres '1', '2' et '3'

# Definir une liste `corners` avec:
    # Une liste avec comme elements 0 et 0,
    # Une liste avec comme elements 0 et 2,
    # Une liste avec comme elements 2 et 0,
    # Une liste avec comme elements 2 et 2

# Definir une liste `corners` avec:
    # Une liste avec comme elements 0 et 1,
    # Une liste avec comme elements 1 et 0,
    # Une liste avec comme elements 1 et 2,
    # Une liste avec comme elements 2 et 1

# Definir une liste `corners` avec comme elements 1 et 1
    
# Definir une fonction `createGrid`:
    # Renvoyer une liste de trois listes, qui elles sont remplies par trois 0.

# Definir une fonction `printGrid` qui prend pour argument une liste `grid`:
    # Definir une chaine de caractere vide `output`
    # Mettre `output` en tant que concatenation de `output` et "    A B C\n    _ _ _\n"
    # Pour `i` prenant toutes les valeurs entre 0 et la longueur de grid - 1:
        # Mettre `output` en tant que concatenation de `output`, de l'élement `i` de `ott` et de " | "
        # Pour `element` prenant toutes les valeurs dans l'élement `i` de `grid`:
            # Mettre `output` en tant que concatenation de `output` et l'élement `element` de `playerSymbols` et " "
        # Mettre `output` en tant que concatenation de `output` et "\n"
    
    # Afficher `output`

# Definir une fonction `testCoordinate` qui prend pour argument une liste `grid`, et deux nombres `x` et `y`:
    # Renvoyer True si `x` et `y` sont entre 0 et 3, sinon renvoyer False

# Definir une fonction `getValue` qui prend pour argument une liste `grid`, et deux nombres `x` et `y`:
    # Si `testCoordinate` avec les arguments `grid`, `x` et `y` renvoye True,
        # Alors renvoyer l'élement d'index `x` de l'élement `y` de `grid`
    # Sinon,
        # Renvoyer 0

# Definir une fonction `setValue` qui prend pour argument une liste `grid`, et trois nombres `x`, `y` et `value`:
    # Si `testCoordinate` avec les arguments `grid`, `x` et `y` renvoye True,
        # Alors mettre l'élement d'index `x` de l'élement `y` de `grid` en tant que `value`
        # Et renvoyer True
    # Sinon,
        # Renvoyer False

# Definir une fonction `toCoordinates` qui prend pour argument une chaine de caractere `coord`:
    # Mettre `coord` en miniscule
    # Si la longueur de `coord` est égale a 2, alors:
        # Si le premier caractere de `coord` est dans `abc` et si le deuxieme caractere de `coord` est dans `ott`:
            # Alors renvoyer une liste qui contient l'index du premier caractere de `coord` dans abc, et l'index du deuxieme caractere de `coord` dans ott
        # Sinon si le deuxieme caractere de `coord` est dans `abc` et si le premier caractere de `coord` est dans `ott`:
            # Alors renvoyer une liste qui contient l'index du deuxieme caractere de `coord` dans abc, et l'index du premier caractere de `coord` dans ott
    # Renvoyer une liste qui contient -1 et -1

# Definir une fonction `convertToTextCoords` qui prend pour arguments deux entiers `x` et `y`:
    # Renvoyer la concatenation de l'élement `x` de la liste `abc` et l'élement `y` de la liste `ott`

# Definir une fonction `isWinner` qui prend pour argument une liste `grid` et un nombre entier `player`:
    # Pour `i` prenant toutes les valeurs entre 0 et 2:
        # Definir une variable `col` qui a pour valeur 0
        # Definir une variable `row` qui a pour valeur 0
        # Definir une variable `diag` qui a pour valeur 0
        # Definir une variable `reverseDiag` qui a pour valeur 0
        # Pour `y` prenant toutes les valeurs entre 0 et 2:
            # Si la valeur renvoyée par `grid` avec les arguments `grid`, `y` et `i` est égal a `player`,
                # Alors incrementer `col` par 1
            # Si la valeur renvoyée par `grid` avec les arguments `grid`, `i` et `y` est égal a `player`,
                # Alors incrementer `row` par 1
            # Si la valeur renvoyée par `grid` avec les arguments `grid`, `y` et `y` est égal a `player`,
                # Alors incrementer `diag` par 1
            # Si la valeur renvoyée par `grid` avec les arguments `grid`, `y` et 2-`y` est égal a `player`,
                # Alors incrementer `reverseDiag` par 1
            
            # Si `row` == 3 ou `row` == 3 ou `diag` == 3 ou `reverseDiag` == 3,
                # Alors renvoyer True
    # Renvoyer False

# Definir une fonction `filled` qui prend en argument une liste `grid`:
    # Initaliser la variable `filled` a 0
    # Pour `row` prenant toutes les valeurs dans `grid`:
        # Pour `element` prenant toutes les valeurs dans `row`:
            # Si `element` est different de 0, incrementer `filled` de 1
    # Renvoyer `filled`

# Definir une fonction `isDraw` qui prend en argument une liste `grid`:
    # Definir une variable `filledBoxes` en tant que la valeur renvoyée par `filled` avec l'argument `grid`
    # Renvoyer l'assertion (`filledBoxes` === 9)

-- IA --

# Definir une function `firstTurns` qui prend pour argument une liste `grid` et un entier `player`:
    # Initaliser `opponent` a 2
    # Si `player` est égal a 2:
        # Mettre `opponent` a 1
    
    # Initialiser `roundNumber` au nombre renvoyé par `filled` avec comme argument `grid`

    # Si `roundNumber` est égal a 1 et que le retour de `getValue` avec comme arguments `grid`, 1 et 1 est égal a 0:
        # Alors renvoyer `center`
    # Sinon si `roundNumber` est égal a 0 ou `roundNumber` est égal a 1:
        # Renvoyer le retour de `choice` avec comme argument `corners`
    # Sinon si `roundNumber` est égal a 3 et que soit
      # le retour de `getValue` avec comme arguments `grid`, 0 et 0
      # est égal au retour de `getValue` avec comme arguments `grid`, 2 et 2
      # est égal a `opponent`
     # ou que
      # le retour de `getValue` avec comme arguments `grid`, 2 et 0
      # est égal au retour de `getValue` avec comme arguments `grid`, 0 et 2
      # est égal a `opponent`
    # Alors,
        # Renvoyer le retour de `choice` avec comme argument `sides`
    
    # Renvoyer une liste qui contient -1 et -1

# Definir une function `playerCanWin` qui prend pour argument une liste `grid` et un entier `player`:
    # Pour `x` prenant toutes les valeurs entre 0 et 2
        # Pour `y` prenant toutes les valeurs entre 0 et 2
            # Si le retour de `getValue` avec comme arguments `grid`, `x` et `y` est égal 0,
                # Appeler la fonction `setValue` avec comme arguments `grid`, `x`, `y` et `player`
                # Si le retour de `isWinner` avec comme argument `grid` et `player` est égal a True:
                    # Appeler la fonction `setValue` avec comme arguments `grid`, `x`, `y` et 0
                    # Renvoyer une liste avec comme elements `x` et `y`
                # Appeler la fonction `setValue` avec comme arguments `grid`, `x`, `y` et 0
    # Renvoyer une liste avec comme elements -1 et -1


# Definir une function `playerCanFork` qui prend pour argument une liste `grid` et un entier `player`:
    # Initaliser `winCounter` a 0
    # Pour `x1` prenant toutes les valeurs entre 0 et 2
        # Pour `y1` prenant toutes les valeurs entre 0 et 2
            # Si le retour de `getValue` avec comme arguments `grid`, `x1` et `y1` est égal 0,
                # Appeler la fonction `setValue` avec comme arguments `grid`, `x1`, `y1` et `player`
                # Pour `x2` prenant toutes les valeurs entre 0 et 2
                    # Pour `y2` prenant toutes les valeurs entre 0 et 2
                        # Si le retour de `getValue` avec comme arguments `grid`, `x2` et `y2` est égal 0,
                            # Appeler la fonction `setValue` avec comme arguments `grid`, `x2`, `y2` et `player`
                            # Si le retour de `isWinner` avec comme argument `grid` et `player` est égal a True,
                                # Alors incrementer `winCounter` de 1
                            # If `winCounter` est plus grand ou égal a 2
                                # Appeler la fonction `setValue` avec comme arguments `grid`, `x1`, `y1` et 0
                                # Appeler la fonction `setValue` avec comme arguments `grid`, `x2`, `y2` et 0
                                # Renvoyer une liste avec comme elements `x1` et `y1`
                            # Appeler la fonction `setValue` avec comme arguments `grid`, `x2`, `y2` et 0
                # Appeler la fonction `setValue` avec comme arguments `grid`, `x1`, `y1` et 0
    # Renvoyer une liste avec comme elements -1 et -1

# Definir une function `aiInput` qui prend pour argument une liste `grid` et un entier `player`:
    # Initaliser `opponent` a 2
    # Si `player` est égal a 2:
        # Mettre `opponent` a 1

    # Initialiser `result` en liste avec comme elements -1 et -1

    # Mettre `result` en tant que la valeur renvoyée par `firstTurns` prenant pour argument `grid` et `turn`
    # Si result n'est pas égal a une liste avec comme elements -1 et -1,
        # Afficher "[ORDINATEUR] firstTurn"
        # Alors renvoyer la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour argument l'élément 1 et l'élement 2 de `result`
    
    # Mettre `result` en tant que la valeur renvoyée par `playerCanWin` prenant pour argument `grid` et `turn`
    # Si result n'est pas égal a une liste avec comme elements -1 et -1,
        # Afficher "[ORDINATEUR] aiCanWin"
        # Alors renvoyer la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour argument l'élément 1 et l'élement 2 de `result`
    
    # Mettre `result` en tant que la valeur renvoyée par `playerCanWin` prenant pour argument `grid` et `opponent`
    # Si result n'est pas égal a une liste avec comme elements -1 et -1,
        # Afficher "[ORDINATEUR] playerCanWin"
        # Alors renvoyer la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour argument l'élément 1 et l'élement 2 de `result`
    
    # Mettre `result` en tant que la valeur renvoyée par `playerCanFork` prenant pour argument `grid` et `opponent`
    # Si result n'est pas égal a une liste avec comme elements -1 et -1,
        # Afficher "[ORDINATEUR] playerCanFork"
        # Alors renvoyer la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour argument l'élément 1 et l'élement 2 de `result`
    
    # Mettre `result` en tant que la valeur renvoyée par `playerCanFork` prenant pour argument `grid` et `turn`
    # Si result n'est pas égal a une liste avec comme elements -1 et -1,
        # Afficher "[ORDINATEUR] aiCanFork"
        # Alors renvoyer la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour argument l'élément 1 et l'élement 2 de `result`
    
    # Afficher "[ORDINATEUR] random"

    # Initialiser une liste vite `freeSpace`
    # Pour `x` prenant toutes les valeurs entre 0 et 2
        # Pour `y` prenant toutes les valeurs entre 0 et 2
            # Si le retour de `getValue` avec comme arguments `grid`, `x` et `y` est égal 0,
                # Ajouter la chaine de caractere renvoyée par la fonction `convertToTextCoords` prenant pour arguments `x` et `y` dans la liste `freeSpace`
    
    # Renvoyer la valeur renvoyée par la fonction `choice` prenant pour argument `freeSpace`

-- FIN IA --

# Definir une fonction `customInput` qui prend pour argument une chaine de caractere `txt`, et d'autres arguments optionnels tel un boolean `autoPlay`, une liste `grid` et un entier `player`:
    # Si autoPlay est égal a True,
        # Initaliser `aiResult` en tant que la chaine de caractere renvoyée par `aiInput` prenant pour argument `grid` et `player`
        # Attendre 0.3 secondes
        # Alors renvoyer `aiResult`
    # Sinon,
        # Tant que True:
            # Definir `enteredInput` en tant que la valeur renvoyée par `input` avec l'argument `txt`
            # Si `enteredInput` en minuscule est égal a "exit", alors:
                # Si la valeur renvoyée par `input` avec l'argument "Est tu sûr? (oui/non) > > " en minuscule est égale a "oui":
                    # Appeler la fonction `exit`
            # Sinon,
                # Renvoyer `enteredInput`

# Definir une fonction `round` qui prend en argument une liste `grid`, un entier `player` et un nombre entier `ai`
    # Initaliser la liste `coordinates` qui contient -1 et -1
    # Tant que coordinates est une liste qui contient -1 et -1
        # Alors appeler la fonction `clear`
        # Appeler la fonction `printGrid` avec comme argument `grid`
        # Afficher la concatenation de "\nC'est le tour du joueur ", `player` en tant que chaine de caractere, "! (", l'élement d'index `player` de playerSymbols et ")"
        # Definir une variable `playerInput` en tant que la chaine de caractere renvoyée par `customInput` prenant pour arguments "Entrer des coordonnées (e.g: A2) > ", l'assertion (`ai` === `player` || `ai` == 3), `grid` et `player`
        # Definir une variable `coordinates` en tant que la liste renvoyée par `toCoordinates` prenant pour argument `customInput`

        # Si la valeur renvoyée par `getValue` avec comme arguments `grid` et l'élement 0 puis 1 de `coordinates` est differente de 0,
            # Alors mettre `coordinates` en tant que liste qui contient -1 et -1
        
    # Appeler la fonction `setValue` avec comme arguments `grid`, l'élement 0 puis 1 de `coordinates` et `player`


# Appeler la fonction `clear`
# Afficher le message:
"""----
Welcome to MORPION!!
----
Le but du jeu est simple:
Il suffit d'aligner, avant son adversaire, 3 symboles identiques horizontalement, verticalement ou en diagonale sur une grille de 3x3.
Le joueur ayant aligné 3 symboles gagne la partie.
Le joueur 1 a le symbole X et le joueur 2 a le symbole O
Pour jouer, le joueur indique les coordonnées de la case dans laquelle il veut jouer, par exemple "C2"

"""
# Appeler la fonction `input` avec comme argument "(Appuyez sur entrer pour continuer.)"

# Initialiser la variable `grid` en tant que la liste renvoyée par `createGrid`
# Initialiser la variable `turn` a 2
# Initialiser la variable `playing` a True
# Initialiser la variable `ai` a 0

# Appeler la fonction `clear`
# Afficher le message:
"""
Est-ce que vous voulez jouer contre l'ordinateur?
Si oui, choisissez 1 si vous voulez que l'ordinateur commence, 2 si vous voulez commencer
Sinon, appuyez simplement sur entrer :]
"""
# Initialiser la variable `aiStr` en tant que la chaine de caractere renvoyée par `input` prenant pour argument "> "

# Si `aiStr` est un nombre entier:
    # Alors mettre `ai` en tant que `aiStr` converti en nombre entier

# Tant que `playing` est égal a True
    # Redefinir turn en tant que (`turn` modulo 2) + 1
    # Appeler la fonction `round` avec comme argument `grid`, `turn` et `ai`
    
    # Si la valeur renvoyée par `isWinner` avec comme argument `grid` et `turn` est égale a True,
        # Alors appeler la fonction `clear`
        # Appeler la fonction `printGrid` avec comme argument `grid`
        # Afficher la concatenation de "\nJOUEUR ", `turn` en tant que chaine de caractere et " A GAGNÉ!\n"
        # Appeler la fonction `input` avec comme argument "(Appuyez sur entrer pour continuer.)"
        # Mettre `playing` a False
    # Sinon si la valeur renvoyée par `isDraw` avec comme argument `grid` est égale a True,
        # Alors appeler la fonction `clear`
        # Appeler la fonction `printGrid` avec comme argument `grid`
        # Afficher "\nÉGALITÉ!\n"
        # Appeler la fonction `input` avec comme argument "(Appuyez sur entrer pour continuer.)"
        # Mettre `playing` a False
    
    # Si `playing` est égal a False:
        # Definir une chaine de caractere vide `playerResponse`
        # Tant que `playerResponse` n'est pas égal a "non" et que `playerResponse` n'est pas égal a "oui":
            # Appeler `clear`
            # Mettre `playerResponse` en tant que la chaine de caractere renvoyée par `customInput` prenant pour argument "Voulez vous rejouer? (oui/non) > " en minuscule

        # Si `playerResponse` est égal a "oui":
            # Alors mettre `playing` a True
            # Mettre `grid` en tant que la liste renvoyée par `createGrid`
            # Mettre `turn` a 2

            # Afficher le message:
            """
            Est-ce que vous voulez jouer contre l'ordinateur?
            Si oui, choisissez 1 si vous voulez que l'ordinateur commence, 2 si vous voulez commencer
            Sinon, appuyez simplement sur entrer :]
            """
            # Initialiser la variable `aiStr` en tant que la chaine de caractere renvoyée par `input` prenant pour argument "> "

            # Si `aiStr` est un nombre entier:
                # Alors mettre `ai` en tant que `aiStr` converti en nombre entier

# FIN